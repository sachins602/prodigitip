// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
    previewFeatures = ["jsonProtocol"]
}

datasource db {
    provider = "mysql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
    shadowDatabaseUrl    = env("SHADOW_DATABASE_URL")
    relationMode = "prisma"
}

model Contact {
    id          String   @id @default(cuid())
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    name        String
    email       String
    subject     String
    description String
}

model Meeting {
    id          String   @id @default(cuid())
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    name        String
    date        DateTime
    email       String
    phone       String
    message     String
}

model Blog {
  id            String   @id @default(cuid())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  blogIdentifier String  @unique
  author        String
  authorTitle   String    @db.Text
  publishedOn   String    @db.Text
  authorImage   String    @db.Text
  title         String
  paragraph1    String    @db.Text
  image1        String    @db.Text
  paragraph2    String    @db.Text
  paragraph3    String    @db.Text
  paragraph4    String    @db.Text
  paragraph5    String    @db.Text
  image2        String    @db.Text
  paragraph6    String    @db.Text
  paragraph7    String    @db.Text
  paragraph8    String    @db.Text
  image3        String    @db.Text
  paragraph9    String    @db.Text
  comments      BlogComment[]
}

model BlogComment {
  id            String   @id @default(cuid())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  deletedAt     DateTime? 
  name          String
  email         String
  comment       String
  replies      BlogCommentReply[]
  blogId       Blog     @relation(fields: [id], references: [id])
  @@index([id])
}

model BlogCommentReply {
  id            String   @id @default(cuid())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  deletedAt     DateTime? 
  name          String
  email         String
  comment       String
  blogCommentId BlogComment     @relation(fields: [id], references: [id])
  @@index([id])
}

model NewsLetterSubscriber {
  id            String   @id @default(cuid())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  email         String
}